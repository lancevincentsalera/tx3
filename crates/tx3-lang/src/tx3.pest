WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

// Identifiers and literals
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
number = @{ ASCII_DIGIT+ }

// Types
primitive_type = { "Int" | "Token" | "Datum" }
type = { primitive_type | identifier }

// Parameters
parameter = { identifier ~ ":" ~ type }
parameter_list = { parameter ~ ("," ~ parameter)* }

// Tx Template definition
tx_template = {
    "tx" ~ identifier ~ "(" ~ parameter_list? ~ ")" ~
    "{" ~ (input | output)* ~ "}"
}

value_deconstructor = { "..." ~ expr }
sub_field = { identifier ~ ("." ~ identifier)+ }

// Input and output blocks
address_field = { "address" ~ ":" ~ expr ~ ("," | NEWLINE | WHITESPACE+)? }
datum_field = { "datum" ~ ":" ~ expr ~ ("," | NEWLINE | WHITESPACE+)? }
redeemer_field = { "redeemer" ~ ":" ~ expr ~ ("," | NEWLINE | WHITESPACE+)? }
from_field = { "from" ~ ":" ~ identifier ~ ("," | NEWLINE | WHITESPACE+)? }
datum_is_field = { "datum_is" ~ ":" ~ identifier ~ ("," | NEWLINE | WHITESPACE+)? }
min_amount_field = { "min_amount" ~ ":" ~ expr ~ ("," | NEWLINE | WHITESPACE+)? }
to_field = { "to" ~ ":" ~ identifier ~ ("," | NEWLINE | WHITESPACE+)? }
amount_field = { "amount" ~ ":" ~ expr ~ ("," | NEWLINE | WHITESPACE+)? }

field_def = { identifier ~ ":" ~ type ~ ("," | NEWLINE | WHITESPACE+)? }

// Add datum definition
datum_def = {
    "datum" ~ identifier ~ "{" ~
    (field_def)* ~
    "}"
}

// Add datum definition
datum_constructor = {
    identifier ~ "{" ~
    (identifier ~ ":" ~ expr ~ ("," | NEWLINE | WHITESPACE+))* ~
    value_deconstructor? ~
    "}"
}

// Add party definition
party_def = {
    "party" ~ identifier ~ (("{" ~
    (identifier ~ ":" ~ identifier ~ ("," | NEWLINE | WHITESPACE+))* ~
    "}") | ";")
}

// Input blocks need more variants and fields
input = {
    "input" ~ ("*")? ~ identifier ~ "{" ~
    from_field? ~
    datum_is_field? ~
    min_amount_field? ~
    redeemer_field? ~
    "}"
}

// Output blocks need datum field support
output = {
    "output" ~ "{" ~
    to_field ~
    amount_field? ~
    datum_field? ~
    "}"
}

// Change the expr rule to use pratt parser notation
expr = { term ~ (infix ~ term)* }
term = _{ 
    number | sub_field | datum_constructor | identifier
}
infix = { "+" | "-" }

// The main program rule
program = { SOI ~ (datum_def | party_def | tx_template)* ~ EOI } 